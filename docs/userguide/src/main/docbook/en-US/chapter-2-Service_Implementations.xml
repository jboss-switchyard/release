<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="sid-2654307">
    
    <title>Service Implementations</title>
    <section id="sid-2654306">
      
      <title>Bean Services</title>
      <para>
        The Bean Component is a pluggable container in SwitchYard which allows Java classes (or beans) to provide and consume services.  This means that you can implement a service by simply annotating a Java class.  It also means you can consume a service by injecting a reference to that service directly into your Java class.  Rather than writing our own POJO container to provide this capability, we have implemented the bean component as a
        <ulink url="http://seamframework.org/Weld">Weld</ulink>
        extension.  No need to learn a new programming model - bean services are standard
        <ulink url="http://jcp.org/en/jsr/detail?id=299">CDI</ulink>
        beans with a few extra annotations.  This also opens up the possibilities of how SwitchYard is used; you can now expose existing CDI-based beans in your application as services to the outside world or consume services within your bean.
      </para>
      <section id="sid-2654306_BeanServices-ProvidingaService">
        
        <title>Providing a Service</title>
        <para>
          Providing a service with the Bean component is as simple as adding an
          <emphasis role="italics">@Service</emphasis>
          annotation to your bean.
        </para>
        <informalexample>
          <programlisting>@Service(SimpleService.class)
public class SimpleServiceBean implements SimpleService {
    public String sayHello(String message) {
        System.out.println("*** Hello message received: " + message);
        return "Hi there!!";
    }
}

public interface SimpleService {
    String sayHello(String message);
}</programlisting>
        </informalexample>
        <para>
          The
          <emphasis role="italics">SimpleService</emphasis>
          interface represents the Service Interface, defining the service operations that are exposed by SwitchYard.
        </para>
        <para>
          The only other thing you need is a META-INF/beans.xml file in your deployed application.  When the application is deployed, the Weld runtime scans the application for beans and enlists the
          <emphasis role="italics">SwitchYardCDIServiceDiscovery</emphasis>
          CDI extension in the CDI lifecycle.  Our extension will pick up
          <emphasis role="italics">@Service</emphasis>
          beans and make them available to the application deployer (will depend on the container).  At this point, the service can be invoked from other services within SwitchYard or bound to a wire protocol via SwitchYard gateways.
        </para>
      </section>
      <section id="sid-2654306_BeanServices-ConsumingaService">
        
        <title>Consuming a Service</title>
        <para>
          Consuming a SwitchYard service from within a CDI bean is done via
          <emphasis role="italics">@Reference</emphasis>
          annotations.
        </para>
        <informalexample>
          <programlisting>@Service(ConsumerService.class)
public class ConsumerServiceBean implements ConsumerService {
 
    @Reference
    private SimpleService service;
 
    public void consumeSomeService(String consumerName) {
        service.sayHello("Hello " + consumerName);
    }  
}
 
public interface ConsumerService {
 
    void consumeSomeService(String consumerName);
}</programlisting>
        </informalexample>
        <para>Note that the contract for the service is all that's exposed to the bean consumer.  The reference could point to a service that is hosted outside of SwitchYard and exposed over JMS, SOAP, FTP, etc.  The SwitchYard runtime handles the resolution of the service reference to a concrete service, allowing your service logic to remain blissfully ignorant.  Invocations made through this reference are routed through the SwitchYard exchange mechanism.</para>
        <para>
          The
          <emphasis role="italics">@Reference</emphasis>
          annotation can accept a service name in cases where the default name resolution (interface Class simple name e.g. "OrderService") are not appropriate.
        </para>
        <informalexample>
          <programlisting>@Reference("urn:myservices:purchasing:OrderService")
private OrderService orders;</programlisting>
        </informalexample>
        <para>This can be useful when the default name resolution is not appropriate.  Keep in mind that the name used by the reference is not required to match the target service, but it resolve to a service through some mechanism.  For example, the deployed application could contain wiring configuration which maps the service name used by the bean reference to a different service name in the runtime.</para>
      </section>
      <section id="sid-2654306_BeanServices-UnitTesting">
        
        <title>Unit Testing</title>
        <para>
          Unit testing in SwitchYard is very easy.  See the
          <link linkend="sid-2654314">Testing SwitchYard Services</link>
          documentation.
        </para>
      </section>
      <section id="sid-2654306_BeanServices-ForgeTooling">
        
        <title>Forge Tooling</title>
        <para>
          Easiest way to get started is to create a new application using the
          <link linkend="sid-2654318">SwitchYard Forge Tooling</link>
          and
          <emphasis role="italics">switchyard.bean</emphasis>
          facet.
        </para>
      </section>
    </section>
    <section id="sid-2654308">
      
      <title>Camel Services</title>
      <para>Camel services allow you to leverage the core routing engine inside of Apache Camel to route between services in SwitchYard.  The route itself is exposed as a service within SwitchYard, which means it has a well-defined contract and can be injected into any other service in the runtime.  The routing logic can be expressed in XML and included directly in the service component configuration, or you can use the Java DSL to define the route in an annotated Java class.</para>
      <section id="sid-2654308_CamelServices-JavaDSLRoutes">
        
        <title>Java DSL Routes</title>
        <para>
          SwitchYard provides an
          <code>@Route</code>
          annotation which can be used to declare that a class contains a Camel route which should be represented as a service in SwitchYard.  The @Route annotation has a single required element which identifies the service interface to be used by the route.  Aside from this annotation, the class looks exactly like a route that you would define in Camel alone.
        </para>
        <informalexample>
          <programlisting>@Route(JavaDSL.class)
public class JavaDSLBuilder extends RouteBuilder {
        public void configure() {
        from("switchyard://JavaDSL")
            .log("Message received in Java DSL Route")
            .log("${body}")
            .split(body(String.class).tokenize("\n"))
            .filter(body(String.class).startsWith("sally:"))
            .to("switchyard://XMLService?operationName=acceptMessage");
    }
}</programlisting>
        </informalexample>
        <para>
          When an application containing one or more Java DSL routes is built, the SwitchYard Maven plugin will automatically generate the required service component configuration in
          <code>META-INF/switchyard.xml</code>
          .  The above route would produce the following configuration:
        </para>
        <informalexample>
          <programlisting>&lt;component name="JavaDSLBuilder"&gt;
    &lt;service name="JavaDSL"&gt;
        &lt;interface.java interface="org.switchyard.quickstarts.camel.service.JavaDSL"/&gt;
    &lt;/service&gt;
    &lt;implementation.camel xmlns="urn:switchyard-component-camel:config:1.0"&gt;
        &lt;java class="org.switchyard.quickstarts.camel.service.JavaDSLBuilder"/&gt;
    &lt;/implementation.camel&gt;
&lt;/component&gt;</programlisting>
        </informalexample>
        <important>
          <para>The "from" endpoint in a Camel service must always equal the service name.  This allows SwitchYard to establish service bindings outside the route definition itself.</para>
        </important>
        <para>
          
        </para>
      </section>
      <section id="sid-2654308_CamelServices-XMLRoutes">
        
        <title>XML Routes</title>
        <para>
          Configuring a Camel service using XML is done using the
          <emphasis role="italics">&lt;implementation.camel&gt;</emphasis>
          configuration directly as follows:
        </para>
        <informalexample>
          <programlisting>&lt;sca:component name="CamelComponent"&gt;
    &lt;sca:service name="OrderService" &gt;
        &lt;sca:interface.java interface="org.switchyard.component.camel.deploy.support.OrderService"/&gt;
    &lt;/sca:service&gt;

    &lt;sca:reference name="WarehouseService"&gt;
        &lt;sca:interface.java interface="org.switchyard.component.camel.deploy.support.WarehouseService"/&gt;
    &lt;/sca:reference&gt;

    &lt;implementation.camel&gt;
        &lt;route xmlns="http://camel.apache.org/schema/spring" id="Camel Test Route"&gt;
            &lt;log message="ItemId [${body}]"/&gt;
            &lt;to uri="switchyard://WarehouseService?operationName=hasItem"/&gt;
            &lt;log message="Title Name [${body}]"/&gt;
        &lt;/route&gt;
     &lt;/implementation.camel&gt;
&lt;/sca:component&gt;</programlisting>
        </informalexample>
        <para>
          You'll notice in the above configuration that the route in the
          <emphasis role="italics">&lt;implementation.camel&gt;</emphasis>
          does not specify a
          <emphasis role="italics">from</emphasis>
          endpoint on the route definition. For Camel XML routes, Switchyard automatically adds this for the service. The above would be invokable by using the following code (snippet from a SwitchYard test):
        </para>
        <informalexample>
          <programlisting>String title = newInvoker("OrderService").operation("getTitleForItem").sendInOut("10").getContent(String.class);</programlisting>
        </informalexample>
        <para>Running the above code snippet would generate the following in you console log:</para>
        <informalexample>
          <programlisting>10:57:45,915 INFO  [impl.DefaultCamelContext] Apache Camel 2.6.0 (CamelContext: camel-1) started in 0.838 seconds
10:57:46,284 INFO  [impl.DefaultCamelContext] Route: Camel Test Route started and consuming from: Endpoint[switchyard://OrderService]
10:57:46,307 INFO  [impl.DefaultCamelContext] Apache Camel 2.6.0 (CamelContext: camel-1) is starting
10:57:46,307 INFO  [impl.DefaultCamelContext] Total 1 routes, of which 1 is started.
10:57:46,307 INFO  [impl.DefaultCamelContext] Apache Camel 2.6.0 (CamelContext: camel-1) started in 0.000 seconds
10:57:46,428 INFO  [Camel Test Route] ItemId [10]
10:57:46,434 INFO  [Camel Test Route] Title Name [Fletch]</programlisting>
        </informalexample>
      </section>
      <section id="sid-2654308_CamelServices-SwitchYardEndpoints">
        
        <title>SwitchYard Endpoints</title>
        <para>
          The Camel component contains not only wraps Camel, it defines a Camel component itself which maps to
          <code>switchyard://</code>
          endpoint URIs.  As seen in the above examples, the
          <code>switchyard://</code>
          endpoint scheme can be used to route between Camel routes and SwitchYard services.  Endpoint configuration is very straightforward:
        </para>
        <informalexample>
          <programlisting>switchyard://[service-name]?operationName=[operation-name]</programlisting>
        </informalexample>
        <itemizedlist>
          <listitem>
            <para>
              <code>service-name</code>
              : name of the SwitchYard service
            </para>
          </listitem>
          <listitem>
            <para>
              <code>operation-name</code>
              : name of the service operation to be invoked.  This is only used on references and is optional if the target service only has a single operation.
            </para>
          </listitem>
        </itemizedlist>
      </section>
    </section>
  </chapter>
