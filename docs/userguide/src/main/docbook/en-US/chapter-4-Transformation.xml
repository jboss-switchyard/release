<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="sid-2654312">
    
    <title>Transformation</title>
    <para>
      Transformation represents a change to the
      <emphasis role="strong">format</emphasis>
      and/or
      <emphasis role="strong">representation</emphasis>
      of a message's content.  The representation of a message is simply the  Java contract (e.g. java.lang.String, org.example.MyFancyObject) used to access the underlying  content.  The format of a message refers to the actual structure of the data itself.  Examples of data formats include XML, JSON, CSV, and EDI.
    </para>
    <para>Take the following message content:</para>
    <informalexample>
      <programlisting>&lt;MyBook&gt;
  &lt;Chapter1&gt;
  &lt;Chapter2&gt;
&lt;/MyBook&gt;</programlisting>
    </informalexample>
    <para>The format of this content is XML.  One representation of XML in Java is as a String.  Of course, the representation could also be a org.w3c.dom.Document, java.io.InputStream, etc.</para>
    <informalexample>
      <programlisting>String content = "&lt;MyBook&gt;...";</programlisting>
    </informalexample>
    <para>Transformation  plays an important role in connecting service consumers and providers,  since the format and representation of message content can be quite  different between the two.  For example, a SOAP gateway binding will likely use a different representation and format for messages than a service offered by a Java Bean.  In order to route  services from the SOAP gateway to the Bean providing the service, the  format and representation of the SOAP message will need to change.   Implementing the transformation logic directly in the consumer or  provider pollutes the service logic and can lead to tight coupling.   SwitchYard allows for the transformation logic to declared outside the  service logic and injected into the mediation layer at runtime.</para>
    <section id="sid-2654312_Transformation-AddingTransformationtoYourApplication">
      
      <title>Adding Transformation to Your Application</title>
      <para>
        Transformation of message content is specified in the descriptor of your SwitchYard application (switchyard.xml).  The qualified name of the type being transformed
        <emphasis role="italics">from</emphasis>
        as well as the type being transformed
        <emphasis role="italics">to</emphasis>
        are defined along with the transformer implementation.  This allows transformation to be a declarative aspect of a SwitchYard application, as the runtime will automatically register and execute transfomers in the course of a message exchange.
      </para>
      <informalexample>
        <programlisting>&lt;transforms&gt;
   &lt;transform.java class="org.switchyard.quickstarts.demos.orders.Transformers"
                   from="{urn:switchyard-quickstart-demo:orders:1.0}submitOrder"
                   to="java:org.switchyard.quickstarts.demos.orders.Order"/&gt;
&lt;/transforms&gt;</programlisting>
      </informalexample>
    </section>
    <section id="sid-2654312_Transformation-JavaTransfomer">
      
      <title>Java Transfomer</title>
      <para>There are two methods available for creating a Java-based transformer in SwitchYard:</para>
      <orderedlist>
        <listitem>
          <para>
            Implement the
            <code>org.switchyard.transform.Transfomer</code>
            interface and add a
            <code>&lt;transform.java&gt;</code>
            definition to your switchyard.xml.
          </para>
        </listitem>
        <listitem>
          <para>
            Annotate one or more methods on your Java class with
            <code>@Transformer</code>
            .
          </para>
        </listitem>
      </orderedlist>
      <para>
        When using the
        <code>@Transformer</code>
        annotation, the SwitchYard maven plugin will automatically generate the
        <code>&lt;transform.java&gt;</code>
        definition(s) for you and add them to the switchyard.xml packaged in your application.  The following Java class would produce the
        <code>&lt;transform.java&gt;</code>
        definition provided above:
      </para>
      <informalexample>
        <programlisting>public class MyTransformer {
    @Transformer(from = "{urn:switchyard-quickstart-demo:orders:1.0}submitOrder")
    public Order transform(Element from) {
       // handle transformation here
    }
}</programlisting>
      </informalexample>
      <para>
        The optional
        <code>from</code>
        and
        <code>to</code>
        elements of the
        <code>@Transformer</code>
        annotation can be used to specify the qualified type name used during transformer registration.  If not supplied, the full class name of the method parameter will be used as the from type and the full class name of the return type will be used as the to type.
      </para>
    </section>
    <section id="sid-2654312_Transformation-SmooksTransformer">
      
      <title>Smooks Transformer</title>
      <para>
        There are three distinct transformation models available with
        <ulink url="http://www.smooks.com">Smooks</ulink>
        in SwitchYard:
      </para>
      <orderedlist>
        <listitem>
          <para>
            <emphasis role="italics">XML to Java</emphasis>
            :  Based on a standard Smooks Java Binding configuration.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="italics">Java to XML</emphasis>
            :   Based on a standard Smooks Java Binding configuration.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="italics">Smooks</emphasis>
            :  This is a "normal" Smooks transformation in which the developer must define which Smooks filtering Result is to be exported back to the SwitchYard Message as the transformation result.
          </para>
        </listitem>
      </orderedlist>
      <para>
        Smooks transformations are declared by including a
        <code>&lt;transform.smooks&gt;</code>
        definition in switchyard.xml.
      </para>
      <informalexample>
        <programlisting>&lt;transform.smooks config="/smooks/OrderAck_XML.xml"
                  from="java:org.switchyard.quickstarts.transform.smooks.OrderAck"
                  to="{urn:switchyard-quickstart:transform-smooks:1.0}submitOrderResponse"
                  type="JAVA2XML"/&gt;</programlisting>
      </informalexample>
      <para>
        The
        <code>config</code>
        attribute points to a Smooks resource containing the mapping definition.  The type attribute can be one of
        <code>SMOOKS</code>
        ,
        <code>XML2JAVA</code>
        , or
        <code>JAVA2XML</code>
        .
      </para>
    </section>
    <section id="sid-2654312_Transformation-JSONTransformer">
      
      <title>JSON Transformer</title>
      <para>
        The
        <ulink url="http://www.json.org">JSON</ulink>
        transformer provides a basically mapping facility between POJOs and JSON using the popular Jackson processor.  Specification of the transformer requires one Java type and one named type.  The following example converts a JSON serialization of an order to the Order object.
      </para>
      <informalexample>
        <programlisting>&lt;trfm:transform.json
            from="{urn:switchyard-quickstart:transform-json:1.0}order"
            to="java:org.switchyard.quickstarts.transform.json.Order"/&gt;</programlisting>
      </informalexample>
    </section>
  </chapter>
