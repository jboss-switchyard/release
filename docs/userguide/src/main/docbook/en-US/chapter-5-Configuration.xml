<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="sid-2654313">
    
    <title>Configuration</title>
    <para>
      Each SwitchYard application must include a configuration descriptor named
      <code>switchyard.xml</code>
      in the
      <code>/META-INF</code>
      directory of it's archive.  The basic structure of this descriptor is:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          A parent
          <code>&lt;switchyard&gt;</code>
          element which contains all other configuration.
        </para>
      </listitem>
      <listitem>
        <para>
          Exactly one child
          <code>&lt;composite&gt;</code>
          element, which contains the SCA description of the application.
        </para>
      </listitem>
      <listitem>
        <para>
          Zero or one
          <code>&lt;transforms&gt;</code>
          elements which can contain one or more transform definitions.
        </para>
      </listitem>
    </itemizedlist>
    <para>Here's an example of what a SwitchYard descriptor looks like:</para>
    <informalexample>
      <programlisting>&lt;switchyard xmlns="urn:switchyard-config:switchyard:1.0"   
            xmlns:sca="http://docs.oasis-open.org/ns/opencsa/sca/200912"   
            xmlns:bean="urn:switchyard-component-bean:config:1.0"   
            xmlns:soap="urn:switchyard-component-soap:config:1.0"&gt;   
    &lt;sca:composite name="orders"&gt;       
        &lt;sca:service name="OrderService" promote="OrderService"&gt;
            &lt;soap:binding.soap&gt;
                &lt;soap:serverPort&gt;18001&lt;/soap:serverPort&gt;
                &lt;soap:wsdl&gt;wsdl/OrderService.wsdl&lt;/soap:wsdl&gt;
            &lt;/soap:binding.soap&gt;
        &lt;/sca:service&gt;
        &lt;sca:component name="InventoryService"&gt;
            &lt;sca:service name="InventoryService"&gt;
                &lt;sca:interface.java interface="org.switchyard.quickstarts.demos.orders.InventoryService"/&gt;
            &lt;/sca:service&gt;
            &lt;bean:implementation.bean/&gt;
        &lt;/sca:component&gt;
        &lt;sca:component name="OrderService"&gt;
            &lt;sca:service name="OrderService"&gt;
                &lt;sca:interface.java interface="org.switchyard.quickstarts.demos.orders.OrderService"/&gt;
            &lt;/sca:service&gt;
            &lt;sca:reference name="InventoryService"&gt;
                &lt;sca:interface.java interface="org.switchyard.quickstarts.demos.orders.InventoryService"/&gt;
            &lt;/sca:reference&gt;
            &lt;bean:implementation.bean/&gt;
        &lt;/sca:component&gt;
    &lt;/sca:composite&gt;
    &lt;transforms xmlns="urn:switchyard-config:transform:1.0"&gt;
        &lt;transform.java class="org.switchyard.quickstarts.demos.orders.Transformers"
                        from="{urn:switchyard-quickstart-demo:orders:1.0}submitOrder"
                        to="java:org.switchyard.quickstarts.demos.orders.Order"/&gt;
        &lt;transform.java class="org.switchyard.quickstarts.demos.orders.Transformers"
                        from="java:org.switchyard.quickstarts.demos.orders.OrderAck"
                        to="{urn:switchyard-quickstart-demo:orders:1.0}submitOrderResponse"/&gt;
    &lt;/transforms&gt;
&lt;/switchyard&gt;</programlisting>
    </informalexample>
    <para>Luckily, SwitchYard can generate the bulk of the above description based off of annotations in your application code, so you won't have to muck with this XML directly.  For the portions that can't be generated, Forge tooling fills the gap nicely.  While you certainly can play with the XML directly, we try to do what we can to protect you from those pointy angle brackets.</para>
    <section id="sid-2654313_Configuration-Composite">
      
      <title>Composite</title>
      <para>
        The composition of a SwitchYard application is defined using the
        <ulink url="http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=sca-assembly">Service Component Architecture Assembly Model</ulink>
        , an open specification undergoing standardization in
        <ulink url="http://www.oasis-open.org/org">OASIS</ulink>
        .  For the nitty gritty details of the assembly model, please consult the SCA specification.  This section provides a brief overview of the important elements:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <code>&lt;composite&gt;</code>
            : single, top-level application element which defines a set of services, the relationships and dependencies of those services, and the linkage (if any) to services available outside the application.
          </para>
        </listitem>
        <listitem>
          <para>
            <code>&lt;component&gt;</code>
            : contains the implementation of a service and the dependencies of that service
          </para>
        </listitem>
        <listitem>
          <para>
            <code>&lt;service&gt;</code>
            : defines the name and interface for a service.  This element is used inside a component definition to declare a service and can also appear inside a composite definition to indicate that a service is visible to outside applications.
          </para>
        </listitem>
        <listitem>
          <para>
            <code>&lt;interface.XXX&gt;</code>
            : the contract for a service.  The type of the interface replaces 'XXX' in the definition.  Supported interface types at this point are "java" and "wsdl".
          </para>
        </listitem>
        <listitem>
          <para>
            <code>&lt;binding.XXX&gt;</code>
            : the binding of a service.  The type of the binding replaces 'XXX' in the definition.  Example bindings include "binding.soap" and "binding.camel".
          </para>
        </listitem>
        <listitem>
          <para>
            <code>&lt;implementation.XXX&gt;</code>
            : the implementation of a service.  The type of the implementation replaces 'XXX' in the definition.  Example implementations include 'implementation.bean" and "implementation.camel".
          </para>
        </listitem>
      </itemizedlist>
    </section>
    <section id="sid-2654313_Configuration-Transforms">
      
      <title>Transforms</title>
      <para>
        The
        <code>&lt;transforms&gt;</code>
        section of SwitchYard configuration is used to define transformers local to your application.  Similar to interfaces, bindings, and implementations, each transformer definition includes a type stuff in it's definition (e.g. transform.java, transform.smooks).  The
        <code>from</code>
        and
        <code>to</code>
        definition on each transformer corresponds to the message type used on a service and/or reference interface used within SwitchYard.  See the Transformer section of the User Guide for more information on individual transformer types.
      </para>
    </section>
    <section id="sid-2654313_Configuration-GeneratedConfiguration">
      
      <title>Generated Configuration</title>
      <para>As mentioned earlier, SwitchYard is capable of generating configuration off of annotations in your application code so that you don't have to hand edit XML configuration.  The generated configuration is packaged up with your application as part of the Maven build lifecycle and placed in</para>
      <informalexample>
        <programlisting>target/classes/META-INF/switchyard.xml</programlisting>
      </informalexample>
      <para>Your application project can also include a descriptor in</para>
      <informalexample>
        <programlisting>src/main/resources/META-INF/switchyard.xml</programlisting>
      </informalexample>
      <para>This version of the configuration can be edited by the user directly and is also used by Forge tooling to specify configuration in response to SwitchYard forge commands.  During the build process, the user-editable switchyard.xml is merged with any generated configuration to produce the final switchyard.xml in the target/ directory.</para>
    </section>
  </chapter>
