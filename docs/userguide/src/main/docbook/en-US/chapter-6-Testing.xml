<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="sid-2654314">
    
    <title>Testing</title>
    <para>Testing your applications is dead simple with the comprehensive unit test support provided in SwitchYard.  There are two primary elements to test support in SwitchYard:</para>
    <itemizedlist>
      <listitem>
        <para>
          <code>SwitchYardTestCase</code>
          - base unit test class which takes care of bootstrapping an embedded SwitchYard runtime and deploying the project as a SwitchYard application.
        </para>
      </listitem>
      <listitem>
        <para>
          <code>TestMixIn</code>
          s - composition-based method for adding specific testing tools to your test case.  Each MixIn provides customized testing tools for things like service implementations, gateway bindings, and transformers.
        </para>
      </listitem>
    </itemizedlist>
    <section id="sid-2654314_Testing-EnablingTestSupport">
      
      <title>Enabling Test Support</title>
      <para>Adding test support to your SwitchYard application is simply a matter of adding a dependency to the switchyard-test module in your application's pom.xml.</para>
      <informalexample>
        <programlisting>&lt;dependency&gt;
    &lt;groupId&gt;org.switchyard&lt;/groupId&gt;
    &lt;artifactId&gt;switchyard-test&lt;/artifactId&gt;
    &lt;version&gt;[release-version]&lt;/version&gt; &lt;!-- e.g. "0.1.0" --&gt;
    &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;</programlisting>
      </informalexample>
    </section>
    <section id="sid-2654314_Testing-SwitchYardTestCase">
      
      <title>SwitchYardTestCase</title>
      <para>
        To take advantage of the test support in SwitchYard, your unit test should extend the base
        <code>SwitchYardTestCase</code>
        class.
        <code>SwitchYardTestCase</code>
        takes care of creating and starting an embedded runtime for each test method.  After the embedded runtime is started, the project containing the test is packaged as a SwitchYard application and deployed to it.  You can take advantage of various helper methods in the base test class to invoke your service and assert against the result.
      </para>
      <informalexample>
        <programlisting>@SwitchYardTestCaseConfig(config = "META-INF/switchyard.xml")
public class MyServiceTest extends SwitchYardTestCase  {   
    @Test   
    public void testOperation() {
        newInvoker("MyService")
        .operation("acceptMessage")
        .sendInOnly("Test message content");
    }
}</programlisting>
      </informalexample>
      <para>
        The optional
        <code>SwitchYardTestCaseConfig</code>
        can be used if you would like to use a different application descriptor than the default META-INF/switchyard.xml to test your application.
      </para>
    </section>
    <section id="sid-2654314_Testing-TestMixIns">
      
      <title>TestMixIns</title>
      <para>
        The
        <code>TestMixIn</code>
        feature allows you to selectively enable additional test functionality based on the capabilities of your application.  The following MixIn types are available in 0.1:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <code>CDIMixIn</code>
            : boostraps a stand-alone CDI environment, automatically discovers CDI beans, registers bean services, and injects references to SwitchYard services.
          </para>
        </listitem>
        <listitem>
          <para>
            <code>HTTPMixIn</code>
            : client methods for testing HTTP-based services.
          </para>
        </listitem>
        <listitem>
          <para>
            <code>SmooksMixIn</code>
            : stand-alone testing of any Smoooks transformers in your application.
          </para>
        </listitem>
      </itemizedlist>
    </section>
  </chapter>
